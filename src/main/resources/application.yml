spring:
  application:
    name: choerodon-file
  datasource:
    url: ${SPRING_DATASOURCE_URL:jdbc:mysql://db.hzero.org:3306/hzero_file?useUnicode=true&characterEncoding=utf-8&useSSL=false}
    username: ${SPRING_DATASOURCE_USERNAME:hzero}
    password: ${SPRING_DATASOURCE_PASSWORD:hzero}
    hikari:
      # 连接池最小空闲连接数
      minimum-idle: ${SPRING_DATASOURCE_MINIMUM_IDLE:20}
      # 连接池允许的最大连接数
      maximum-pool-size: ${SPRING_DATASOURCE_MAXIMUM_POOL_SIZE:200}
      # 等待连接池分配连接的最大时长（毫秒）
      connection-timeout: ${SPRING_DATASOURCE_CONNECTION_TIMEOUT:30000}
  redis:
    # Redis连接超时时间
    connect-timeout: ${SPRING_REDIS_CONNECT_TIMEOUT:2000}
    # Redis读取超时时间s
    timeout: ${SPRING_REDIS_READ_TIMEOUT:5000}
    host: ${SPRING_REDIS_HOST:redis.hzero.org}
    port: ${SPRING_REDIS_PORT:6379}
    database: ${SPRING_REDIS_DATABASE:1}
    lettuce:
      pool:
        # 资源池中最大连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
        max-active: ${SPRING_REDIS_POOL_MAX_ACTIVE:50}
        # 资源池运行最大空闲的连接数
        # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
        max-idle: ${SPRING_REDIS_POOL_MAX_IDLE:50}
        # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
        # 默认 -1 表示永不超时，设置5秒
        max-wait: ${SPRING_REDIS_POOL_MAX_WAIT:5000}
  web:
    resources:
      # 资源缓存时间，单位秒
      cache:
        period: 3600
      chain:
        # 开启压缩
        compressed: true
        # 启用缓存
        cache: true
  servlet:
    multipart:
      # 单个文件上传最大
      maxFileSize: ${SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE:200MB}
      # 上传请求最大限制
      maxRequestSize: ${SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE:200MB}
  thymeleaf:
    prefix: classpath:/templates/file/
    mode: LEGACYHTML5
  mvc:
    view:
      suffix: .html # 返回页面自动拼接.html后缀

server:
  undertow:
    threads:
      # 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接
      # 默认值为8，建议设置每个CPU核心一个线程
      io: ${SERVER_UNDERTOW_IO_THREADS:4}
      # 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程
      # 默认等于 io-threads*8，它的值设置取决于系统的负载，可适当调大该值
      worker: ${SERVER_UNDERTOW_WORKER_THREADS:128}
    # 每块buffer的空间大小，越小空间被利用越充分
    # 不要设置太大，以免影响其他应用，合适即可
    buffer-size: ${SERVER_UNDERTOW_BUFFER_SIZE:1024}
    # 是否分配的直接内存(NIO直接分配的堆外内存)。默认false
    direct-buffers: true
    # HTTP POST请求最大的大小。默认0，无限制，可设置10M
    max-http-post-size: 10485760

feign:
  circuitbreaker:
    # 启用断路器
    enabled: ${FEIGN_CIRCUITBREAKER_ENABLED:true}
  # 请求压缩配置
  compression:
    request:
      # 配置请求GZIP压缩
      enabled: ${FEIGN_COMPRESSION_REQUEST_ENABLED:true}
      # 配置压缩数据大小的下限
      min-request-size: ${FEIGN_COMPRESSION_REQUEST_MIN_REQUEST_SIZE:2048}
  # Feign客户端配置
  client:
    config:
      # Feign客户端默认配置
      default:
        # 连接超时
        connectTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_CONNECT_TIMEOUT:2000}
        # 读取超时
        readTimeout: ${FEIGN_CLIENT_CONFIG_DEFAULT_READ_TIMEOUT:5000}
        # Feign日志级别：NONE/BASIC/HEADERS/FULL
        loggerLevel: ${FEIGN_CLIENT_CONFIG_DEFAULT_LOGGER_LEVEL:FULL}

choerodon:
  saga:
    service: choerodon-asgard
  file:
    system:
      # 当使用hzero的文件类型限制,也需要跳过限制的系统预设文件类型
      file-type: csv,tgz,gz,xls,xlsx,png,bmp,jpg,png,tif,gif,pcx,tga,exif,fpx,svg,psd,cdr,pcd,dxf,ufo,eps,ai,raw,WMF,webp,avif,yml,yaml,side,gor
    oss:
      type: ${OSS_TYPE:MINIO} # oss类型 MINIO、HUAWEI、ALIYUN
      endpoint: ${OSS_ENDPOINT:http://minio.example.com/minio}
      accessKey: ${OSS_ACCESSKEY:accessKey}
      secretKey: ${OSS_SECRETKEY:secretKey}
      domian: ${OSS_DOMIAN:} # 域名地址阿里云使用,可不填，默认为null
      region: ${OSS_REGION:} # Bucket所属地区华为云使用,可不填，默认为null
      prefix: ${OSS_PREFIX:} # Bucket前缀，可根据需要添加，默认为null
hzero:
  service:
    platform:
      name: choerodon-platform
    oauth:
      name: choerodon-oauth
    iam:
      name: choerodon-iam
    file:
      name: choerodon-file
    message:
      name: choerodon-message
    admin:
      name: choerodon-admin
    swagger:
      name: choerodon-swagger
    gateway:
      name: choerodon-gateway
    monitor:
      name: choerodon-monitor
  file:
    preview-type: onlyOffice
    # kk-file-view-url: http://172.20.0.201:7700/onlinePreview
    only-office:
      token: ${DOC_SERVER_TOKEN:epFl7vl24D}
      doc-server-url: ${DOC_SERVER_URL:http://document.hzero.org:7000/document}
      call-back-url: ${DOC_SERVER_CALL_BACK:http://dev.hzero.org:8080/hfle/v1/only-office/save}
      converter-url: ${DOC_SERVER_CONVERTER_URL:http://document.hzero.org:8000/converter}
    gateway-path: ${FILE_GATEWAY_URL:http://hzeronb.saas.hand-china.com/hfle}
    rootPath: /tmp/data/fragement #分片临时文件的存储路径(绝对路径)
  resource:
    # 匹配的资源才会解析JwtToken便于得到UserDetails
    pattern: ${HZERO_RESOURCE_PATTERN:/v1/*,/hzero/*,/hfle/v1/*,/hfle/hzero/*,/choerodon/v1}

mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
    key-generator: snowflake
    snowflake:
      start-timestamp: 1577808000000
      meta-provider: redis
      meta-provider-redis-db: ${SPRING_REDIS_DATABASE:1}
      meta-provider-redis-refresh-interval: 540000
      meta-provider-redis-expire: 600000

logging:
  level:
    org.springframework.cloud: info
    io.github.resilience4j: info
    com.netflix.discovery: warn
    org.hzero.boot.platform.lov: info
    org.apache.ibatis: ${LOG_LEVEL:info}
    io.choerodon: ${LOG_LEVEL:info}
    org.hzero: ${LOG_LEVEL:info}