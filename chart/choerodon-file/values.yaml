## 初始化配置至配置服务及初始化本服务数据库
preJob:
  # job 超时时间
  timeout: 1200
  # 工具 jar 包镜像库地址
  image: registry.cn-shanghai.aliyuncs.com/c7n/dbtool:0.8.0
  preInitDB:
    # 是否初始化本服务数据库
    enabled: true
    datasource:
      # 本服务数据库相关信息，端口号结尾，不要加/或者数据库名
      url: jdbc:mysql://localhost:3306?useUnicode=true&characterEncoding=utf-8&useSSL=false&useInformationSchema=true&remarks=true&serverTimezone=Asia/Shanghai
      username: username
      password: password

## 实例运行数量
replicaCount: 1

## 设置默认的 image、imageTag 和 imagePullPolicy。
image:
  repository: registry.cn-shanghai.aliyuncs.com/c7n/choerodon-file
  tag: ~
  pullPolicy: IfNotPresent

## Deployment 更新策略
deploymentUpdate:
  type: RollingUpdate
  maxUnavailable: 0
  maxSurge: 100%

## Pod 优先级设置
## ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
##
priorityClassName: ""

## Pod 节点分配
## ref: https://kubernetes.io/docs/user-guide/node-selection/
##
nodeSelector: {}
tolerations: []
affinity: {}

## 给 Pod 附加的 annotations
podAnnotations: {}

## ## Pod 附加的 labels
podLabels: {}

## 实例运行时的环境变量
env:
  open:
    # 本实例服务端口
    SERVER_PORT: 8110
    # 本实例管理端口
    MANAGEMENT_SERVER_PORT: 8111

    # Eureka 注册中心地址
    EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://dev.hzero.org:8000/eureka/
    # 服务以IP地址注册
    EUREKA_INSTANCE_PREFER_IP_ADDRESS: true
    # 续约间隔时间，默认30秒
    EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS: 30
    # 实例故障摘除时间，默认90秒，实际是90*2=180秒，配置45就是90秒
    EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS: 45
    # 是否启用配置中心
    SPRING_CLOUD_CONFIG_ENABLED: false
    # 配置中心地址
    SPRING_CLOUD_CONFIG_URI: http://dev.hzero.org:8010/

    # 数据库地址
    SPRING_DATASOURCE_URL: jdbc:mysql://db.hzero.org:3306/hzero_file?useUnicode=true&characterEncoding=utf-8&useSSL=false
    # 数据库用户名
    SPRING_DATASOURCE_USERNAME: hzero
    # 数据库密码
    SPRING_DATASOURCE_PASSWORD: hzero
    # 连接池最小空闲连接数
    SPRING_DATASOURCE_MINIMUM_IDLE: 20
    # 连接池允许的最大连接数
    SPRING_DATASOURCE_MAXIMUM_POOL_SIZE: 200
    # 等待连接池分配连接的最大时长（毫秒）
    SPRING_DATASOURCE_CONNECTION_TIMEOUT: 30000

    # Redis host
    SPRING_REDIS_HOST: redis.hzero.org
    # Redis port
    SPRING_REDIS_PORT: 6379
    # Redis DB
    SPRING_REDIS_DATABASE: 1
    # 资源池中最大连接数
    # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整
    SPRING_REDIS_POOL_MAX_ACTIVE: 50
    # 资源池运行最大空闲的连接数
    # 默认8，-1表示无限制；可根据服务并发redis情况及服务端的支持上限调整，一般建议和max-active保持一致，避免资源伸缩带来的开销
    SPRING_REDIS_POOL_MAX_IDLE: 50
    # 当资源池连接用尽后，调用者的最大等待时间(单位为毫秒)
    # 默认 -1 表示永不超时，设置5秒
    SPRING_REDIS_POOL_MAX_WAIT: 5000

    # 单个文件上传最大
    SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: 200MB
    # 上传请求最大限制
    SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: 200MB

    # Hystrix 熔断超时时间
    HYSTRIX_COMMAND_TIMEOUT_IN_MILLISECONDS: 12000
    # 执行命令线程池的核心线程数，也是命令执行的最大并发量
    HYSTRIX_THREADPOOL_DEFAULT_CORE_SIZE: 128
    # hystrix最大执行线程数
    HYSTRIX_THREADPOOL_DEFAULT_MAXIMUM_SIZE: 256
    # Ribbon 读取超时时间
    RIBBON_READ_TIMEOUT: 5000
    # Ribbon 连接超时时间
    RIBBON_CONNECT_TIMEOUT: 2000
    # Ribbon从DiscoveryClient同步Server的间隔时间
    RIBBON_SERVER_LIST_REFRESH_INTERVAL: 10000
    # IO线程数, 它主要执行非阻塞的任务
    SERVER_UNDERTOW_IO_THREADS: 4
    # 阻塞任务线程池
    SERVER_UNDERTOW_WORKER_THREADS: 128
    # 每块buffer的空间大小，越小空间被利用越充分
    SERVER_UNDERTOW_BUFFER_SIZE: 1024
    # 日志级别
    LOG_LEVEL: info
    # documentServer鉴权token
    DOC_SERVER_TOKEN: phmBqfsvkr
    # documentServer 地址
    DOC_SERVER_URL: http://document.hzero.org/document
    # onlyOffice回调地址
    DOC_SERVER_CALL_BACK: http://dev.hzero.org:8080/hfle/v1/only-office/save
    # documentServer converter 地址
    DOC_SERVER_CONVERTER_URL: http://converter.document.hzero.org/converter
    # 文件服务路径
    FILE_GATEWAY_URL: http://hzeronb.saas.hand-china.com/hfle
    OSS_TYPE: MINIO # oss类型 MINIO、HUAWEI、ALIYUN
    OSS_ENDPOINT: http://minio.example.com/minio # oss 地址
    OSS_ACCESSKEY: accessKey # 账号
    OSS_SECRETKEY: secretKey # 密码
    OSS_DOMIAN:
    OSS_REGION: # Bucket所属地区华为云使用,可不填，默认为null
    OSS_PREFIX: # Bucket前缀，可根据需要添加，默认为null
    #    JAVA_OPTS: >-
    #      -Xms1024m
    #      -Xmx1536m

    ## Skywalking 配置参数
    # SKYWALKING_OPTS: >-
    #   -javaagent:/agent/skywalking-agent.jar
    #   -Dskywalking.agent.application_code=asgard-service
    #   -Dskywalking.agent.sample_n_per_3_secs=-1
    #   -Dskywalking.collector.backend_service=oap.skywalking:11800


## Liveness 和 Readiness 探针相关配置
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
livenessProbe:
  initialDelaySeconds: 180
  periodSeconds: 30
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3
readinessProbe:
  initialDelaySeconds: 5
  periodSeconds: 15
  timeoutSeconds: 3
  successThreshold: 1
  failureThreshold: 3

persistence:
  enabled: false
  resourcePolicy: "keep"
  existingClaim: ""
  storageClass: ""
  subPath: ""
  accessMode: ReadWriteMany
  size: 5Gi

## 资源请求和限制相关配置
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  limits:
    # cpu: 100m
    memory: 2Gi
  requests:
    # cpu: 100m
    memory: 2Gi

## 插件相关配置
plugins:
  # skywalking agent 镜像地址
  skywalkingAgentImage: registry.cn-shanghai.aliyuncs.com/c7n/skywalking-agent:6.6.0

## service 相关设置
## ref: http://kubernetes.io/docs/user-guide/services/
##
service:
  # 是否启用 service 暴露本服务
  enabled: true
  # Service 名称
  name: choerodon-file
  # Service 类型
  type: ClusterIP
  # 指定 service 的 clusterIP
  clusterIP: ~
  # 端口设置
  ports:
    # 服务端口
    http:
      port: 8110
      nodePort: 30122
    # 管理端口
    actuator:
      port: 8111
      nodePort: 30123
  ## externalIPs 设置
  # externalIPs:
  #   - externalIp1
  annotations: {}
    # prometheus.io/scrape: 'true'
  # prometheus.io/path: '/actuator/prometheus'
  # prometheus.io/port: '8111'

## 指标收集
metrics:
  # 收集应用的指标数据路径
  path: /actuator/prometheus
  # 性能指标应用分组
  group: spring-boot

# 是否收集日志至EFK
logs:
  enabled: false
  # 日志收集格式
  parser: spring-boot